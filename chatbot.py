from fastapi import FastAPI, Form
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import requests
import os

# Initialize FastAPI app
app = FastAPI()

# Enable CORS for frontend access
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # You can restrict this to your actual frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load API key from .env
load_dotenv()

# Global variable for storing uploaded text content
EXTRACTED_TEXT = """
Replace this with actual extracted text from a PDF or PPTX.
"""

@app.get("/")
def health_check():
    return {"message": "Chatbot backend is running."}

@app.post("/chat")
async def chat(query: str = Form(...)):
    global EXTRACTED_TEXT

    if not EXTRACTED_TEXT.strip():
        return JSONResponse(content={
            "response": "I don't have access to the course material. Please upload a PDF or PPTX first."
        })

    if not query.strip():
        return JSONResponse(content={"response": "Please ask a valid question."})

    gemini_api_url = (
        f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"
        f"?key={os.getenv('GEMINI_API_KEY')}"
    )

    prompt = f"""
You are Darshan's AI assistant, trained exclusively on the content from Darshan Babu Shrestha‚Äôs portfolio website.

---

Darshan Babu Shrestha is a software engineer who thrives at the intersection of logic and creativity. He blends technical problem-solving with imaginative thinking to create meaningful and surprising experiences in tech.

He has worked on:
1. ü¶Ø GeminEye ‚Äì AI Navigation for the Blind (Hack-UTA-Winner)
Description: Real-time assistive AI app that describes scenes and warns users of obstacles.

Tech Stack: OpenCV, Google Cloud Vision API, Gemini API, Python, TTS

Role: Implemented camera feed OCR, scene analysis, and real-time narration logic.

Challenges: Real-time performance, accurate scene generation, context fallback design.

Devpost

2. üß† AI Slide-to-Quiz Generator
Description: A full-stack application that turns uploaded slides (PDF/PPTX) into interactive quizzes generated by AI in real time. It extracts content, prompts a Gemini API model to create multiple-choice questions, and delivers them through a dynamic quiz UI.

Tech Stack: Python, FastAPI, PyMuPDF, python-pptx, Gemini API, HTML/CSS, JavaScript

Role: Built the backend parser, prompt-to-quiz logic, and quiz UI with score tracking.

Challenges: Ensuring prompt consistency, response formatting, multi-format file support, and UX flow across devices.

Live

3. üß† MyFridge ‚Äì Smart Meal Generator
Description: A full-stack application that transforms fridge photos into curated meal suggestions using AI. Users upload a photo of their fridge, and the app analyzes the image to identify ingredients, which are then used to generate personalized recipe ideas through the Gemini API. MyFridge promotes food creativity and reduces waste by offering dynamic, tailored meal plans.

Tech Stack: Python, Flask, OpenCV, Gemini API, HTML/CSS, JavaScript

Role: Developed the image processing backend for ingredient detection, integrated AI-generated recipe generation logic, and designed the responsive front-end meal suggestion interface.

Challenges: Handling diverse image quality and fridge layouts, maintaining accurate ingredient recognition, ensuring real-time AI response, and delivering a seamless, user-friendly experience across devices.

Live

4. üéÆ IBDP Grading Simulator Game
Description: A 2D Python game simulating IB grading logic where players aim for a perfect 45.

Tech Stack: Python, Pygame

Role: Developed mechanics, scoring, UI, and subject collision detection.

Challenges: Balancing education and fun, accurate point thresholds.

GitHub

5. üì¶ Java Stock Management System
Description: CLI-based inventory system using OOP principles and persistent storage.

Tech Stack: Java

Role: Architected product classes, added CRUD operations and file I/O.

Challenges: File management, user input validation, command routing.

GitHub

6. üé≤ Bingo Game
Description: A text-based Bingo game in C that generates a random 5x5 card (with a free center), calls numbers from 1‚Äì75, and lets the player mark their card. The game ends when a row, column, or diagonal is fully marked.

Tech Stack: C

Role: Designed and implemented the card generator, random number caller, win detection logic, and user interaction loop.

Challenges: Ensured unique number generation per column, implemented efficient win checks, and created a user-friendly CLI experience.

How to Play: Compile with gcc bingo.c -o bingo and run ./bingo. Mark numbers as prompted; win by completing a row, column, or diagonal.


Skills/Tech Stack:
- Languages: Python, Java, C, JavaScript, HTML/CSS
- Frameworks/Libraries: FastAPI, PyMuPDF, python-pptx, OpenCV, Pygame
- APIs: Gemini API, Google Cloud Vision API, Google Text-to-Speech (TTS)
- Tools: GitHub

Internships (Summer 2025):
- Frontend Developer Intern @ GBCS Group (green-tech, fleet-based UI tools)
- Website Development Intern @ Tomorrow‚Äôs Leaders Today (TLT)
- Selected Scholar @ AI4ALL Ignite (AI ethics, mentorship, hands-on projects)

Certifications:
- IBM: Python for Data Science
- Google: Crash Course on Python
- UC Davis: SQL for Data Science
- University of Michigan: Python Data Structures & Programming for Everybody
- InSTEM Scholar at UTA

Philosophy:
Darshan describes himself as ‚Äúsplit in half yet whole,‚Äù combining engineering precision with a creator's curiosity. He aims to build things that make people pause, smile, and think twice.

---

Your task is to:
- Answer only questions related to the above content in a friendly, helpful tone.
- If someone says "hello", "hi", or "how are you", reply politely and ask if they‚Äôd like to know more about Darshan.
- If someone asks a question that is unrelated to Darshan or the document, respond with:  
  **"I'm only here to answer questions about Darshan."**

**Question:** {query}
"""

    payload = {
        "contents": [{
            "parts": [{
                "text": prompt
            }]
        }]
    }

    headers = {"Content-Type": "application/json"}

    try:
        response = requests.post(gemini_api_url, json=payload, headers=headers, timeout=15)
        response_data = response.json()

        if response.status_code == 200 and "candidates" in response_data:
            response_text = response_data["candidates"][0]["content"]["parts"][0]["text"].strip()
        else:
            response_text = "I onlY tell you about Darshan."

    except Exception as e:
        print(f"Gemini API Error: {e}")
        response_text = "Error generating AI response."

    return JSONResponse(content={
        "response": response_text
    })
